<!--   
    
  NEXT:     
    ======================================   
       
   rethink/enable elevatoring
   fix rect size for texts (see problem with borders-on)
   fix texts overlapping screens (fix text start points)...  
   add flash-clips to individual instances? yes
   one word per screen mode
   randomize-server
   debug 'socket interrupted' alert on client
   bigger text?
   2 elevators at same time (just off in speed)
   remove grass from green list?
      
   FLIPS:    
    tt6, tt10 
    cons1
    water 1,3
    apt 56,59,92,33,49,28
    elev 14,18, 
    apt 56,63,62,33
    bt 152, 153, 22,149, 167, 28
    
   BUGS:  
    No clips for brown!?
    
    New effects:
      - Text-Elevatoring
      - Double-elevator
      - Video-Elevatoring ?
      - Only text  (falling eg LTM, or appearing and disappearing fast)
      - Only video with super-large black text
      - Only micro-texts (falling?) 
    ======================================                             
    Implement http commands
    finish editing text
    Do Scrolling
    
    Maybe:    
      use related clips for something (when we do the double-fade in?)
    
  SERVER-Effects
    - All fade-out/in
    - All same color
    - All scrolling     
  ADD: 
    - Video-Elevatoring, Text-Elevatoring???
    
  CLIPS-TO-REMOVE:
      
  EFFECTS:
    SCROLLING ACROSS -  Broken
    VERY LARGE TEXT (transparent) - one word fills screen
    SLIDING WINDOW OF TEXT - Broken
         
  BUGS:     
    - [FATAL] Micro too long: navigational memory
    - 'Unable to deletes**    
    
  CLIPS TO REMOVE
    - apt4, water5, water6, bt109, bt128, construction4, street14, apt40, elevator14  

  $Id: ArchOfAssoc.mxml,v 1.3 2015/03/09 14:07:44 dhowe Exp $
  
  rightClick="onRightClick()"
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:aoa="aoa.*"
  verticalScrollPolicy="off" backgroundColor="#000000" creationComplete="appInit()"  
  horizontalScrollPolicy="off"  keyUp="onKeyUp(event)"   
  preinitialize="preInit()" layout="absolute" 
  enterFrame="onEveryFrame(event)">
  
  <!--mouseDown="onMouseDown(event)" doubleClickEnabled="true" doubleClick="onDoubleClick()" -->       
  
  <!--mx:Label id="label1" text="{AoA.instanceId}" x="120" y="30" styleName="primaryMax" visible="{AoA.showInfo}"/>
  <mx:Label text="{AoA.instanceId+1}" x="{width/2+120}" y="30" styleName="primaryMax" visible="{AoA.showInfo}"/-->
  <!--mx:Label text="time:  {AoA.syncTime}" x="10" y="{height-80}" styleName="primarySync" visible="{AoA.showInfo}"/>  
  <mx:Label text="sync:  {AoAModeManager.nextCmd} @ {AoAModeManager.nextCmdTimeStr}" x="{width/2-80}" y="{height-80}" styleName="primarySync" visible="{AoA.showInfo}"/-->

  <mx:Style> 
    .primary {
        fontFamily: PRIMARY;  
    }
    .primarySync {
        fontFamily: PRIMARY;  
        fontSize: 48;
    }
    .primaryMax {
        fontFamily: PRIMARY;  
        fontSize: 100;
    }
    Application {
        background-color:""; 
        background-image:""; 
        padding: 0px;
        margin-top: 0;
        margin-right: 0;
        margin-bottom: 0;
        margin-left: 0;
    }   
    Label {
        color: white;  
        border-color: white;
        border-thickness: 2;
        border-style: solid;
    }    
  </mx:Style>
             
  <mx:Script>
  <![CDATA[
    
      import aoa.*; 

      import mx.core.*;
      import mx.controls.Text;
      import mx.managers.SystemManager;      
      import mx.containers.Canvas;
      
      import flash.utils.setTimeout;
      import flash.display.*;
      
      import flash.events.InvokeEvent;
      import flash.desktop.NativeApplication;

      include "aoa/Constants.as";
      
      private function preInit():void { 
        AoA.init(this); 
      }
      
      private function appInit() : void 
      {     
        if (!RELEASE_BUILD) AoA.initMemoryCounter();
                        
        AoA.dumpApplicationInfo();          
        NativeApplication.nativeApplication.autoExit = true;
        
        //if (!RELEASE_BUILD)
        NativeApplication.nativeApplication.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
        NativeApplication.nativeApplication.addEventListener(Event.EXITING, AoA.onExiting);
        
        if (ENABLE_START_ON_LOGIN && RELEASE_BUILD)   {                    
            try {
                NativeApplication.nativeApplication.startAtLogin=true;
            }
            catch (e:Error) {
              AoA.warn("Unable to set startAtLogin",e);
            }
        }                                              
        
		if (ROTATE_STAGE) doRotateTransform();         
        if (!RELEASE_BUILD && SHOW_MIDLINE) resetMidline();        
        
		// moved into tick-timer to start with some blank space
		
        //if (SHOW_TEXT)  TextAoA.create(this, 3000, INITIAL_TEXT_COUNT);     
        //if (SHOW_VIDEO) ClipAoA.create(this, 3000, INITIAL_CLIP_COUNT); 
        
        setTimeout(startTickTimer, 5000);       
      } 
      private static var fs:UIComponent;
      
      private function startTickTimer() : void {
              
		if (SHOW_TEXT)  TextAoA.create(this, 3000, INITIAL_TEXT_COUNT);     
		if (SHOW_VIDEO) ClipAoA.create(this, 3000, INITIAL_CLIP_COUNT);  
		  
        AoA.log("Starting tick timer...");  
        var myTimer:Timer = new Timer(TIMER_INTERVAL, 0); 
        myTimer.addEventListener("timer", onTick);
        myTimer.start();
        trace("----------------------------------------------------------");
                       
        if (NETWORK_ENABLED)  {
          //flash.system.Security.allowDomain("*");
          var sl : SocketListener = SocketListener.getInstance();
          sl.connect();
         // sl.scheduleCommandEvent("reset", 10000);
        } 
      }
      
      public static var frames:Number = 0;
      public function onEveryFrame(event:Event) : void 
      {
        frames++; 
        if (!RELEASE_BUILD) AoA.updateFPS(); // AoA.totalFPS(frames);
        
        if (AoA.flashClips) {          
          if (frames%5==0)                
            ClipAoA.create(this, 100, 1);
          else 
            if (AoA.getInstances(CLIP).length>MIN_CLIPS_PER)
              AoA.randomFadeOut(CLIP, 10, 1);          
        } 
        if (AoA.flashText) {          
          if (frames%5==0) {                            
            if (AoA.getInstances(TEXT).length>15)
              AoA.randomFadeOut(TEXT, 10, 1);
            else
              TextAoA.create(this, 100, 3);
          }          
        } 
               
        if (frames==Number.MAX_VALUE) frames = 0;
      }
      
      private function resetMidline() : void { 
          if (fs != null) removeChild(fs);          
          fs = new UIComponent();
          fs.graphics.lineStyle(1,0x333333,1);
          fs.graphics.drawRect(width/2-1,0,3,height);
          addChild(fs);
      }
      
      private function onInvoke(invokeEvent:InvokeEvent):void {        
        var now:String = new Date().toTimeString();
        if (invokeEvent.currentDirectory != null){
            AoA.log("Current directory=" + invokeEvent.currentDirectory.nativePath);              
        } else {
            AoA.log("--no directory information available--");
        }                       
        if (invokeEvent.arguments.length > 0)
            AoA.log("Arguments: " + invokeEvent.arguments.toString());
      }         
             
      private function onMouseDown(evt:MouseEvent) : void  {
         stage.nativeWindow.startMove();         
      }
      
      private function doRotateTransform() : void  { 
        setActualSize(height,width);              
        var matrix:Matrix =  this.transform.matrix;                       
        matrix.rotate(Math.PI/2);                                  
        matrix.translate(height,0);       
        this.transform.matrix = matrix;   
        resetMidline(); 
      }
      
      
      private function onDoubleClick() : void
      {
        /* if (RELEASE_BUILD) return;
        AoA.fullScreen = !AoA.fullScreen;       
        screenConfigd = false; */
        //stage.frameRate += 10;
       //AoA.log("rate="+stage.frameRate);
      }
      
      private function refresh() : void
      {
        if (RELEASE_BUILD) return;
         AoA.clear(3000);        
         if (SHOW_TEXT)  setTimeout(TextAoA.create, 3000, this, 3000, INITIAL_TEXT_COUNT);     
         if (SHOW_VIDEO) setTimeout(ClipAoA.create, 3000, this, 3000, INITIAL_TEXT_COUNT);        
      }
      
      // add to application above: click="onClick()"
      private function onClick() : void
      {
        //trace("onClick()"); 
      }
      
      private function listFonts():void {
        var fontArray:Array = Font.enumerateFonts(true);
        for(var i:int = 0; i < fontArray.length; i++) {
           var thisFont:Font = fontArray[i];
           //if (thisFont.fontType == "embedded") {
              AoA.log("FONT-" + i +" :: "+ thisFont.fontName + "; style: " 
                + thisFont.fontStyle + "; type: " + thisFont.fontType);
              //ta1.text += "FONT " + i + ":: name: " + thisFont.fontName + "; typeface: " + 
                //thisFont.fontStyle + "; type: " + thisFont.fontType + "\n";
           //
        }
      }
      
      private static var screenConfigd:Boolean = false;
      private function doScreenConfig() : void {
        AoA.log("doScreenConfig()...");
        screenConfigd = true;
        
        if (HIDE_MOUSE || RELEASE_BUILD) {       
          stage.nativeWindow.activate();
          stage.nativeWindow.orderToBack();
          stage.nativeWindow.orderToFront();             
          Mouse.hide(); 
        }        
        /* if (!RELEASE_BUILD) {          
          if (AoA.fullScreen&&stage.displayState==StageDisplayState.NORMAL) {
            AoA.log("[INFO] Entering fullscreen...");
            stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
          }
          else if (!AoA.fullScreen&&!AoA.fullScreen&&stage.displayState!=StageDisplayState.NORMAL) {
            AoA.log("[INFO] Exiting fullscreen...");
            stage.displayState = StageDisplayState.NORMAL;
          }
        }       */
        //resetMidline();
      }
      
      private function onTick(e:TimerEvent) : void {
        //AoA.log("AoA.onTick() -> elapsed="+AoA.time); 
        if (SHOW_TEXT)  
          AoA.onTick(TEXT, MIN_TEXTS_PER, MAX_TEXTS_PER);
        if (SHOW_VIDEO) 
          AoA.onTick(CLIP, MIN_CLIPS_PER, MAX_CLIPS_PER);                   
        if (!screenConfigd) doScreenConfig();          
      }
                   
      private function onKeyUp(ke:KeyboardEvent) : void
      {
         //AoA.log("onKeyUp: code="+ke);
         var key:String = AoA.numToChar(ke.charCode);
         //AoA.log("onKeyUp: code="+ke.charCode+" key="+key);
         
         if (ke.keyCode > 36 && ke.keyCode < 41) {
           if (ke.keyCode==37) x-= 1; // arrows
           else if (ke.keyCode==38) y-= 1;
           else if (ke.keyCode==39) x+= 1;
           else if (ke.keyCode==40) y+= 1;
           return;
         }
         
         var mm:AoAModeManager = AoAModeManager.getInstance();
         switch (key) 
         {  
           /* case "r":   
             if (!AoA.stageRotated) {
               AoA.stageRotated = true;
               AoA.log("[INFO] Rotating stage..."); 
               doRotateTransform();
             }
             break; 
           case "t":
             AoA.dumpInstances(TEXT);    
             break;   
           case "v":
             AoA.dumpInstances(CLIP);    
             break; */
             /*            case "f":
             AoA.flipping = !AoA.flipping;
             AoA.log("Mode.Flipping="+AoA.flipping); 
             break;   */  
           /* case "s":
             AoA.scrolling = !AoA.scrolling;
             AoA.log("Mode.Scrolling="+AoA.scrolling); 
             break;  */   
           /*  case "s":
             toggleFullScreen()    
             break;      */
             /*            case "w":
             AoA.windowing = !AoA.windowing;
             AoA.log("Mode.Windowing="+AoA.windowing); 
             break; */      
           case "f":
             mm.setLargeFlip(!AoA.largeFlip);
             AoA.log("Mode.LargeFlip="+AoA.largeFlip); 
             break; 
           case "v":
             mm.setClipFlash(!AoA.flashClips);
             AoA.log("Mode.FlashClips="+AoA.flashClips); 
             break;  
           case "t":
             mm.setTextFlash(!AoA.flashText);
             AoA.log("Mode.FlashText="+AoA.flashText);             
             break;  
           case "c":
             mm.randomColorMode();
             AoA.log("Mode.Color="+AoAModeManager.colorMode); 
             break;  
           case "l":
             AoA.showClipNames = !AoA.showClipNames;
             AoA.log("Mode.ClipNames="+AoA.showClipNames); 
             break; 
		   case "b":
			   mm.setMode(AoAModeManager.BLANK);
			   AoA.log("Mode.BLANK"); 
			   break; 
           case "i":
             AoA.showInfo = !AoA.showInfo;
             AoA.log("Mode.ShowInfo="+AoA.showInfo); 
             break; 
           case "o":
             AoA.dumpObjectCounts(ALL);    
             break;
           case "d":
             AoA.dumpDisplayList(this);                 
             break;
           case "r":
             refresh();                 
             break;
         }
      }                    
    ]]>
  </mx:Script>
  
  <!-- Info Display ========================  -->
  <mx:NumberFormatter id="df0"  precision="0"/>
  <mx:Form x="-17" y="7" color="white" verticalGap="-3" visible="{AoA.showInfo}" styleName="primary">
    <mx:FormItem label="App#{AoA.instanceId}:">
        <mx:Label text="fps={AoA.fps}"/>
    </mx:FormItem>
    <mx:FormItem label="Pool:">
        <mx:Label text="{AoAObj.ID} objs"/>
    </mx:FormItem>
        <mx:FormItem label="Time:">
        <mx:Label text="{df0.format(AoA.time/1000)} sec"/>
    </mx:FormItem>
<!--    <mx:FormItem label="Full:">
        <mx:Label text="{AoA.fullScreen}"/>
    </mx:FormItem>-->

    <mx:FormItem label="Socket:">
        <mx:Label text="{AoA.socketStatus}"/>
    </mx:FormItem>
    <mx:FormItem label="Memory:">
        <mx:Label text="{df0.format(AoA.totMem)} mb"/>
    </mx:FormItem>
    <mx:FormItem label="Info(i): ">
        <mx:Label text="visible"/>
    </mx:FormItem>
     <mx:FormItem label="Color(c): ">
        <mx:Label text="{AoAModeManager.colorMode}"/>
    </mx:FormItem>
    <mx:FormItem label="Refresh(r): ">
        <mx:Label text="ready"/>
    </mx:FormItem>
    <mx:FormItem label="Labels(l):">
        <mx:Label text="{AoA.showClipNames}"/>
    </mx:FormItem>
    <mx:FormItem label="FlashVid(v):">
        <mx:Label text="{AoA.flashClips}"/>
    </mx:FormItem>
    <mx:FormItem label="FlashText(t):">
        <mx:Label text="{AoA.flashText}"/>
    </mx:FormItem>  
    <mx:FormItem label="LargeFlip(f):">
        <mx:Label text="{AoA.largeFlip}"/>
    </mx:FormItem>
    <!--
  
    <mx:FormItem label="">
        <mx:Label text=""/>
    </mx:FormItem>
        <mx:FormItem label="Sync:">
        <mx:Label text="{AoAModeManager.nextCmd}"/>
    </mx:FormItem>
    <mx:FormItem label="Flip:">
        <mx:Label text="{AoA.flipping}"/>
    </mx:FormItem-->

    <!--mx:FormItem label="Window:">
        <mx:Label text="{AoA.windowing}"/>
    </mx:FormItem-->
<!--    <mx:FormItem label="Scroll:">
        <mx:Label text="{AoA.scrolling}"/>
    </mx:FormItem>-->

  </mx:Form>
  
</mx:Application>
